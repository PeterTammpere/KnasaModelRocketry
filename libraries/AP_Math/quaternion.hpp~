// -*- tab-width: 4; Mode: C++; c-basic-offset: 4; indent-tabs-mode: t -*-

// Copyright 2012 Andrew Tridgell, all rights reserved.

//      This library is free software; you can redistribute it and / or
//      modify it under the terms of the GNU Lesser General Public
//      License as published by the Free Software Foundation; either
//      version 2.1 of the License, or (at your option) any later version.

#ifndef QUATERNION_H
#define QUATERNION_H

#include <math.h>

class Quaternion
{
public:
        float q1, q2, q3, q4;

        // constructor creates a quaternion equivalent
        // to roll=0, pitch=0, yaw=0
        Quaternion() { q1 = 1; q2 = q3 = q4 = 0; }

        // setting constructor
        Quaternion(const float _q1, const float _q2, const float _q3, const float _q4):
        q1(_q1), q2(_q2), q3(_q3), q4(_q4) {}

        // function call operator
        void operator ()(const float _q1, const float _q2, const float _q3, const float _q4)
        { q1 = _q1; q2 = _q2; q3 = _q3; q4 = _q4; }

        // check if any elements are NAN
        bool is_nan(void)
        {   return isnan(q1) || isnan(q2) || isnan(q3) || isnan(q4); }

        // return the rotation matrix equivalent for this quaternion
        void rotation_matrix(Matrix3f &m);

        // convert a vector from earth to body frame
        void earth_to_body(Vector3f &v);

    // create a quaternion from Euler angles
        void from_euler(float roll, float pitch, float yaw);

    // create eulers from a quaternion
        void to_euler(float *roll, float *pitch, float *yaw);
};
#endif // QUATERNION_H


/*
#ifndef quaternion_h
#define quaternion_h

typedef uint16_t q_t;

class Quaternion
{
	public:
		Quaternion()
		{
			s=0;
			i=0;
			j=0;
			k=0;
		}
		
		Quaterion( 	q_t s0,
					q_t i0,
					q_t j0,
					q_t k0)
		{
			s=s0;
			i=i0;
			j=j0;
			k=k0;
		}

				
		

	private:
		q_t s;
		q_t i;
		q_t j;
		q_t k;
}


#endif
*/
